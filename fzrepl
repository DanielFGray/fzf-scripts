#!/usr/bin/env bash

usage() {
  less -FEXR <<'HELP'
fzrepl
  interactively edit stdin using stream filters like awk, sed, jq

  -c, --cmd    command used to filter input
  -q, --query  default command string to use

examples:
  echo 'foo bar' | fzrepl -c 'awk {q}' -q '{print $1}'
  echo 'hello world' | fzrepl 'sed -n {q}' -q p
  fzrepl 'jq {q}' 
HELP
}

# TODO: usage eg `fzrepl 'foo {q}' -q 'bar' file`

# TODO: docs!
#  --help
#  eg  fzrepl 'node -e {q}' -q "f = data => data.flatMap(a => a.threads);\nlet A='';process.stdin.on('data',x=>A=A.concat(x.toString())).on('end',()=>process.stdout.write(JSON.stringify(f(JSON.parse(A)),null,2)))"

declare tmpfile=/tmp/fzreplinput
declare cmd
declare default_query
declare output

declare -A colors
colors[red]=$(tput setaf 1)
colors[green]=$(tput setaf 2)
colors[reset]=$(tput sgr0)

cleanup() {
  [[ -e "$tmpfile" ]] && rm "$tmpfile"
}
trap cleanup SIGHUP SIGINT SIGTERM

color() {
  local color
  color="$1"; shift
  printf '%s' "${colors[$color]}" "$*" "${colors[reset]}"
}

err() {
  color red "$@" >&2
  return 1
}

die() {
  (( $# > 0 )) && err "$@"
  exit 1
}

for arg; do
  case $arg in
    -q|--query)
      [[ -z $2 || $2 = -* ]] && die "missing argument to $1"
      default_query="$2"
      shift 2 ;;
    -c|--cmd)
      [[ -z $2 || $2 = -* ]] && die "missing argument to $1"
      cmd="$2"
      shift 2 ;;
    -h|--help) usage; exit ;;
    *) break 2;
  esac
done

if [[ -z $cmd && -n $1 && ! -f $1 ]]; then
  cmd="$1"
  shift
fi

[[ -n $cmd && $cmd = *'{q}'* ]] || {
  die 'command must be set and contain  {q}  somewhere'
}

if [[ -n $1 && -f $1 ]]; then
  file=$1
  shift
fi

if [[ -z $file ]]; then
  file=/dev/stdin
fi

mapfile -t REPLY < <(
  tee "$tmpfile" < "$file" | fzf \
    --height=100% \
    --phony \
    --print-query \
    --query="$default_query" \
    --preview="$cmd < '$tmpfile'"
)

q="${REPLY[0]}"
q=${q@Q}
printf '%s\n' "${cmd//'{q}'/$q}"
